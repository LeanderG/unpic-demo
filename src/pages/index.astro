---
import Input from "../components/Input.astro";
import Select from "../components/Select.astro";
import CopyIcon from "../components/CopyIcon.astro";
import { transformProps } from "@unpic/core";
import { resetId } from "../getId";

resetId();
const searchParams = Astro.url.searchParams;

let params = Object.fromEntries(searchParams as any);

Object.keys(params).forEach(function (key, index) {
  params[key] = params[key] === "" ? undefined : params[key];
});
params.priority = params.priority === "true" ? true : false;

let transformedProps;
let error;
try {
  transformedProps = transformProps(params);
} catch (e) {
  error = e;
}
const Element = "textarea";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>unpic-img demo</title>
    <meta
      name="description"
      content="Demo for unpic-img. Input a link to an image hosted on a CDN, get an optimized img tag."
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <script>
      function copyCode() {
        var copyText = document.getElementById("img-container")?.innerHTML;
        if (copyText) {
          navigator.clipboard.writeText(copyText);
        }
      }

      document
        .getElementById("copy-code-button")
        ?.addEventListener("click", copyCode);
    </script>
  </head>
  <body>
    <div class="min-h-screen">
      <header class="mx-auto max-w-2xl px-2">
        <h1 class="pt-8 text-center text-5xl uppercase md:text-left">
          unpic-img
        </h1>
        <h2 class="pt-2 text-xl">
          Generate responsive, high-performance images using image CDNs
        </h2>
      </header>
      <main class="mx-auto max-w-2xl px-2 py-4">
        <form action="/" method="get">
          <div class="grid grid-cols-2 gap-y-4 gap-x-8 sm:grid-cols-4">
            <Input
              name="src"
              required={true}
              value={params.src}
              class="col-span-2 sm:col-span-4"
            />
            <Input name="height" type="number" value={params.height} />
            <Input name="width" type="number" value={params.width} />
            <Input
              name="aspectRatio"
              type="number"
              value={params.aspectRatio}
            />
            <Select
              name="layout"
              value={params.layout}
              options={[
                { label: "fullWidth", key: "fullWidth" },
                { label: "constrained", key: "constrained" },
                { label: "fixed", key: "fixed" },
              ]}
            />
            <Select
              name="priority"
              value={params.priority}
              options={[
                { label: "false", key: false },
                { label: "true", key: true },
              ]}
            />
            <Input name="alt" value={params.alt} />
            <Input name="background" value={params.background} />
            <Input name="class" value={params.class} />
          </div>
          <div class="pt-8">
            <button
              type="submit"
              class="block w-full rounded-md bg-gradient-to-tr from-indigo-800 to-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            >
              Generate
            </button>
          </div>
        </form>
        <div class="my-8">
          {
            transformedProps ? (
              <>
                <h2 class="mb-6 text-xl">Preview</h2>
                <div id="img-container">
                  <img {...transformedProps} />
                </div>
              </>
            ) : (
              <div>
                <h2 class="mb-6 text-xl">Error transforming props:</h2>
                <pre>{error}</pre>
              </div>
            )
          }
        </div>
        {
          transformedProps ? (
            <div>
              <h2 class="mb-6 text-xl">
                Code
                <button
                  id="copy-code-button"
                  class="ml-1 inline-block h-6 w-6 fill-slate-600 align-middle hover:fill-slate-900"
                >
                  <CopyIcon />
                  <span class="sr-only">copy to clipboard</span>
                </button>
              </h2>
              <Element
                disabled
                class="h-[30rem] w-full"
                aria-label="Optimized image as text"
              >
                <img {...transformedProps} />
              </Element>
            </div>
          ) : undefined
        }
      </main>
    </div>
  </body>
</html>
