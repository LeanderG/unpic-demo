---
import Input from "../components/Input.astro";
import Select from "../components/Select.astro";
import CopyIcon from "../components/CopyIcon.astro";
import { transformProps } from "@unpic/core";
const searchParams = Astro.url.searchParams;

let params = Object.fromEntries(searchParams as any);

let transformedProps;
let error;
try {
  transformedProps = transformProps(params);
} catch (e) {
  error = e;
}
const Element = "textarea";
---

<script>
  function copyCode() {
    var copyText = document.getElementById("img-container")?.innerHTML;
    if (copyText) {
      navigator.clipboard.writeText(copyText);
    }
  }

  document
    .getElementById("copy-code-button")
    ?.addEventListener("click", copyCode);
</script>
<div class="min-h-screen">
  <header class="mx-auto max-w-2xl px-2">
    <h1 class="pt-8 text-center text-5xl uppercase md:text-left">unpic-img</h1>
    <h2 class="pt-2 text-2xl">
      Generate responsive, high-performance images using image CDNs
    </h2>
  </header>
  <main class="mx-auto max-w-2xl px-2 py-4">
    <form action="/" method="get">
      <div class="grid grid-cols-1 gap-y-6 gap-x-8 sm:grid-cols-2">
        <Input name="src" required={true} value={params.src} />
        <Input name="height" value={params.height} />
        <Input name="width" value={params.width} />
        <Input name="aspectRatio" value={params.aspectRatio} />
        <Select value={params.layout} />
        <Input name="class" value={params.class} />
      </div>
      <div class="pt-8">
        <button
          type="submit"
          class="block w-full rounded-md bg-gradient-to-tr from-indigo-800 to-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        >
          Generate
        </button>
      </div>
    </form>
    <div class="my-14">
      {
        transformedProps ? (
          <>
            <h2 class="mb-6 text-3xl">Preview</h2>
            <div id="img-container">
              <img {...transformedProps} />
            </div>
          </>
        ) : (
          <div>
            <h2 class="mb-6 text-3xl">Error transforming props:</h2>
            <pre>{error}</pre>
          </div>
        )
      }
    </div>
    {
      transformedProps ? (
        <div>
          <h2 class="mb-6 text-3xl">
            Code
            <button
              id="copy-code-button"
              class="ml-1 inline-block h-6 w-6 fill-slate-600 align-middle hover:fill-slate-900"
            >
              <CopyIcon />
              <span class="sr-only">copy to clipboard</span>
            </button>
          </h2>
          <Element disabled class="h-[30rem] w-full">
            <img {...transformedProps} />
          </Element>
        </div>
      ) : undefined
    }
  </main>
</div>
